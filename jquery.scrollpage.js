// Generated by CoffeeScript 1.6.2
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  (function($) {
    var Scroller, scrollPage;

    Scroller = (function() {
      function Scroller() {
        this._listenWindow = false;
        this.links = [];
      }

      Scroller.prototype.init = function($els) {
        var el, _i, _len;

        for (_i = 0, _len = $els.length; _i < _len; _i++) {
          el = $els[_i];
          if (__indexOf.call(this.links, el) < 0) {
            this.links.push(el);
            $(el).click($.proxy(this.event_clickLink, this));
          }
        }
        if (!this._listenWindow) {
          this.listenWindow();
          return this._listenWindow = true;
        }
      };

      Scroller.prototype.scroll = function(from, to, options) {
        var DELAY, memo, move, wHeight;

        wHeight = $(window).height();
        move = (from < to ? "down" : "up");
        DELAY = 40;
        memo = $.extend({
          DELAY: DELAY,
          from: from,
          to: to,
          move: move,
          pos: from,
          delay: DELAY,
          delayStep: 8,
          delayCounter: 0,
          delayCounterStop: 1,
          step: 5,
          pathStop: wHeight / 4
        }, options);
        return this.delay(this.handler_delay, memo, this.handler_func, memo.stop);
      };

      Scroller.prototype.listenWindow = function() {
        var handler,
          _this = this;

        handler = null;
        return $(window).scroll(function() {
          if (handler !== null) {
            clearTimeout(handler);
          }
          return handler = setTimeout($.proxy(_this.event_scrollPage, _this), 1000);
        });
      };

      Scroller.prototype.delay = function(delay, memo, func, stop) {
        var _delay,
          _this = this;

        if (this.timeout != null) {
          clearTimeout(this.timeout);
          this.timeout = null;
        }
        _delay = typeof delay === typeof Function ? delay(memo) : delay;
        return this.timeout = setTimeout(function() {
          var _memo;

          if (memo == null) {
            return typeof stop === "function" ? stop() : void 0;
          }
          _memo = func(memo);
          if (_memo != null) {
            return _this.delay(delay, _memo, func, stop);
          } else {
            return typeof stop === "function" ? stop() : void 0;
          }
        }, _delay);
      };

      Scroller.prototype.get$Link = function($el) {
        var href;

        href = $el.attr("href");
        if (/^#.+/.test(href)) {
          return $(href);
        } else {
          return null;
        }
      };

      Scroller.prototype.handler_delay = function(opt) {
        var delta;

        if (opt.delayCounter >= opt.delayCounterStop) {
          opt.delay -= opt.delayStep;
          opt.delayCounter = 0;
        } else {
          opt.delayCounter += 1;
        }
        if (opt.delay < 0) {
          opt.delay = 0;
        }
        delta = opt.to - opt.pos;
        if (opt.move === "up") {
          delta *= -1;
        }
        if (delta < opt.pathStop) {
          opt.delay = opt.DELAY;
          opt.delayCounterStop = 0;
          opt.pathStop = 0;
          opt.DELAY;
        }
        return opt.delay;
      };

      Scroller.prototype.handler_func = function(memo) {
        var pos, stop;

        pos = 0;
        stop = false;
        if (memo.move === "down") {
          pos = memo.pos + memo.step;
          stop = pos < memo.to;
        } else {
          pos = memo.pos - memo.step;
          stop = pos > memo.to;
        }
        if (stop) {
          window.scrollTo(0, pos);
          memo.pos = pos;
          return memo;
        } else {
          window.scrollTo(0, memo.to);
          return null;
        }
      };

      Scroller.prototype.event_clickLink = function(e) {
        var $link, from, move, stopPos, to,
          _this = this;

        e.preventDefault();
        $link = this.get$Link($(e.target));
        if ($link == null) {
          return;
        }
        from = $(window).scrollTop();
        to = $link.position().top;
        move = (from < to ? "down" : "up");
        stopPos = move === 'down' ? to - 100 : to + 100;
        return this.scroll(from, stopPos, {
          move: move,
          stop: function() {
            return _this.scroll(stopPos, to);
          }
        });
      };

      Scroller.prototype.event_scrollPage = function() {
        var $link, delta, from, link, pos, _delta, _i, _len, _pos, _ref;

        from = $(window).scrollTop();
        pos = from;
        delta = $(document).height();
        _ref = this.links;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          link = _ref[_i];
          $link = this.get$Link($(link));
          if (!$link) {
            continue;
          }
          _pos = $link.position().top;
          _delta = Math.abs(_pos - from);
          if (delta > _delta) {
            delta = _delta;
            pos = _pos;
          }
        }
        if (pos !== from) {
          return this.scroll(from, pos);
        }
      };

      return Scroller;

    })();
    scrollPage = new Scroller;
    return $.fn.scrollPage = function() {
      $(this).data("scrollPage", scrollPage);
      return scrollPage.init($(this));
    };
  })(jQuery || $);

}).call(this);
